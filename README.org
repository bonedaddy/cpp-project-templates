* C++ CMake (+) Conan Project Templates 

This project many C++ CMake and Conan project templates which can make
easier for creating new projects instead of starting everything from
scratch. 

  *Project Templates Provided:* 

Basic CMake Projects: 

  + Basic CMake Project with 2 executables.
    + Directory: [[file:basic-cmake-project][file:basic-cmake-project]]

OpenGL / Computer Graphics 

  + Basic OpenGL Project
    + Directory: [[file:basic-opengl-project][file:basic-opengl-project]]
    + Description: Minimal OpenGL project with CMake. 

Boost Libraries / ASIO - Asynchrnous IO Framework 

  + Boost Asio Project 
    + Directory: [[file:boost-asio-basic][file:boost-asio-basic]]
    + Description: Minimal [[https://www.boost.org/doc/libs/1_71_0/doc/html/boost_asio.html][Boost.Asio]] project.

Pybind11 
 
  + Python Pybind11 native module.
    + Directory:  [[file:python-module-pybind11][file:python-module-pybind11]]
    + Note a Python native module is a shared library  - aka *.pyd
      (DLL) or *.so on Windows.

QT Cross Platform - Graphical User Interface Framework

  + Qt5 Widgets + Dynamically Loaded Form
    + Directory:  [[file:qt5-qtwidgets-dynamically-loaded][file:qt5-qtwidgets-dynamically-loaded]]
    + Description: Sample project with Qt5 Widgets dynamically
      loaded. It doesn't not use code generation from the form file,
      instead it loads the form file from the compiled resource at
      runtime. This approach is similar to use QML for describing the
      UI, but unlike QML, the control logic is entirely in C++. 

  + Qt5 QtQuick QML
    + Directory:  [[file:qt5-qtquick-qml][file:qt5-qtquick-qml]]
    + Description: Basic Q5/QML project with CMake.
 
  *Usage:* 

Just copy the project template directory to a new location, open it in
any IDE which supports CMake, namely, Clion, Visual Studio, QTCreator
or KDevelop, and modify it.

Example: 

 + 1 => Clone the repository: 

#+BEGIN_SRC sh 
  $ mkdir -p /tmp/temp && cd /tmp/temp
  $ git clone https://github.com/caiorss/cpp-project-templates
#+END_SRC

 + 2 => Copy the project template directory.

#+BEGIN_SRC sh 
  # Create my-opengll-project from template: 
  $ cp -rv cpp-project-templates/basic-opengl-project my-opengl-project
  'cpp-project-templates/basic-opengl-project' -> 'my-opengl-project'
  'cpp-project-templates/basic-opengl-project/CMakeLists.txt' -> 'my-opengl-project/CMakeLists.txt'
  'cpp-project-templates/basic-opengl-project/README.org' -> 'my-opengl-project/README.org'
  'cpp-project-templates/basic-opengl-project/opengl1.cpp' -> 'my-opengl-project/opengl1.cpp'
#+END_SRC

 + 3 => Open the project with Visual Studio, QTCreator, CLion,
   KDevelop or any other supported IDE. Or generate the IDE-specific
   configuration files with CMake. 

#+BEGIN_SRC sh 
  # Edit the new project with CMake
  $ qtcreator my-opengl-project/CMakeLists.txt &
#+END_SRC

 + 3 => Or compile and build from command line. 

#+BEGIN_SRC sh 
  $ cd my-opengl1-project 

  $ cmake -H. -B_build -G Ninja -DCMAKE_BUILD_TYPE=Release

  $ cmake --build _build --target 
 [2/2] Linking CXX executable openglDemo1.bin

 # Run program: 
 $ _build/openglDemo1.bin 
#+END_SRC

 *Repository* 
 
 + https://github.com/caiorss/cpp-project-templates
