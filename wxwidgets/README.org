* Project Template for WxWidgets with Conan Package Manager 
*** Overview 

Note: The code for this project template was extracted from Code
Blocks' WxWidgets project template.

 *Features of WxWidgets* 

   + Cross platform 

   + Based on Microsoft MFC - Microsoft Foundation Classes

   + More permissive license than QT for static linking.

   + Fragmented documentation. 

   + Many GUI builders / Designers that allows the user to build the
     GUI visually by dragging and dropping widgets:
     + http://codeblocks.org/
     + http://wxformbuilder.org/
     + http://codelite.org/
     + http://wxglade.sourceforge.net/

 *Conan WxWidgets Package* 

  + [[https://github.com/bincrafters/conan-wxwidgets][GitHub - bincrafters/conan-wxwidgets: Conan recipe for wxWidgets library]]

  + [[https://bintray.com/bincrafters/public-conan/wxwidgets%3Abincrafters/3.1.2%3Astable][Version wxwidgets:bincrafters/3.1.2:stable - bincrafters]]

 *Building and running on Linux* 

 + Build: 

#+BEGIN_SRC sh 
 $ make 
#+END_SRC

 + Run: If the compilation is successful, a graphical window will
   appear.

Run WxWidgets application with multiple files: 

#+BEGIN_SRC sh 
  $ bin/sampleApp 
#+END_SRC

Run single-file WxWdigets application: 

#+BEGIN_SRC sh 
  $ bin/singleFileApp  
#+END_SRC

 *See*: 

  + [[https://wiki.wxwidgets.org/WxWidgets_Compared_To_Other_Toolkits][WxWidgets Compared To Other Toolkits - WxWiki]]

  + [[https://docs.wxwidgets.org/3.0/index.html][wxWidgets: Documentation]]

  + [[https://wiki.wxwidgets.org/Writing_Your_First_Application-Introduction][Writing Your First Application-Introduction - WxWiki]]

  + [[https://wiki.wxwidgets.org/Tools][Tools - WxWiki]]

  + [[https://www.codeproject.com/Articles/11515/Introduction-to-wxWidgets][Introduction to wxWidgets - CodeProject]]

  + [[https://www.codeproject.com/Articles/803106/Introduction-to-wxWidgets-GUI-programming-with-wxS][Introduction to wxWidgets GUI programming with wxSmith - CodeProject]]

  + [[http://wiki.codeblocks.org/index.php/WxSmith_tutorial:_Hello_world][WxSmith tutorial: Hello world - CodeBlocks]]

  + [[https://www.meetingcpp.com/blog/items/say-hello-to-wxwidgets-3-0.html][Say hello to wxWidgets 3.0]]

  + [[https://news.ycombinator.com/item?id=11202420][WxWidgets 3.1.0 Brings Better HiDPI Support, WxQt with Qt5 | Hacker News]]
*** Build with a Docker image 

Docker containers can be used reproducing the development environment
by encapsulating all runtime, compilation dependencies, libraries and
tooling required to build some application. This sample project
contains a proof-of-concept docker file used for building a container
that can compile Wx-wigets code on any Linux distribution. 

Other Docker images: 

  + [[https://github.com/mkrrr/wxwidgets-msw64][GitHub - mkrrr/wxwidgets-msw64: Docker image for c++ wxWidgets development for target Windows 64-bit]]

  + [[https://github.com/wxWidgets/Phoenix/tree/master/docker][Phoenix/docker at master · wxWidgets/Phoenix · GitHub]]

Step 1: Build the docker image named 'wx-build' based on Debian-stable.

#+BEGIN_SRC sh 
 $ make docker-image 
#+END_SRC

Step 2: Build from the docker shell. 

#+BEGIN_SRC sh 
  $ make docker-shell 
  
  root@636ba0e51133:/cwd# make 
  cmake -B_build -H. -DCMAKE_BUILD_TYPE=Debug
  -- The CXX compiler identification is GNU 8.3.0
  -- Detecting CXX compiler ABI info
  -- Detecting CXX compiler ABI info - done
  n "3.0.4") 
  [TRACE] wx_libraries = -L/usr/lib/x86_64-linux-gnu -pthread   -lwx_gtk2u_xrc-3.0 -lwx_gtk2u_html-3.0 -lwx_gtk2u_qa-3.0 -lwx_gtk2u_adv-3.0 -lwx_gtk2u_core-3.0 -lwx_baseu_xml-3.0 -lwx_baseu_net-3.0 -lwx_baseu-3.0
  -- Configuring done
  make[1]: Entering directory '/cwd/_build'
  /usr/bin/cmake -S/cwd -B/cwd/_build --check-build-system CMakeFiles/Makefile.cmake 0
  /usr/bin/cmake -E cmake_progress_start /cwd/_b
  ... ... ... ... 
  ... ... ... ... 

  [ 80%] Building CXX object CMakeFiles/sampleApp.dir/sampleApp/wxwidgets_sampleApp.cpp.o
  /usr/bin/c++  -DWXUSINGDLL -D_FILE_OFFSET_BITS=64 -D__WXGTK__ -isystem /usr/lib/x86_64-linux-gnu/wx/include/gtk2-unicode-3.0 -isystem /usr/include/wx-3.0  -pthread -g   -std=gnu++17 -o CMakeFiles/sampleApp.dir/sampleApp/wxwidgets_sampleApp.cpp.o -c /cwd/sampleApp/wxwidgets_sampleApp.cpp
  [100%] Linking CXX executable sampleApp
  /usr/bin/cmake -E cmake_link_script CMakeFiles/sampleApp.dir/link.txt --verbose=1
  /usr/bin/c++   -pthread -g   CMakeFiles/sampleApp.dir/sampleApp/wxwidgets_sampleMain.cpp.o CMakeFiles/sampleApp.dir/sampleApp/wxwidgets_sampleApp.cpp.o  -o sampleApp -L/usr/lib/x86_64-linux-gnu -pthread   -lwx_gtk2u_xrc-3.0 -lwx_gtk2u_html-3.0 -lwx_gtk2u_qa-3.0 -lwx_gtk2u_adv-3.0 -lwx_gtk2u_core-3.0 -lwx_baseu_xml-3.0 -lwx_baseu_net-3.0 -lwx_baseu-3.0 
  /usr/bin/cmake -E copy /cwd/_build/sampleApp /cwd/bin/
  make[3]: Leaving directory '/cwd/_build'
  [100%] Built target sampleApp
  make[2]: Leaving directory '/cwd/_build'
  /usr/bin/cmake -E cmake_progress_start /cwd/_build/CMakeFiles 0
  make[1]: Leaving directory '/cwd/_build'
  root@636ba0e51133:/cwd# 
#+END_SRC

Step 3: Run applications. 

#+BEGIN_SRC sh 
  root@636ba0e51133:/cwd# _build/sampleApp 

  root@636ba0e51133:/cwd# _build/singleFileApp 
#+END_SRC

Step 4: Build directly without entering in the docker shell. 

#+BEGIN_SRC sh 
  $ make docker-compile 
#+END_SRC
